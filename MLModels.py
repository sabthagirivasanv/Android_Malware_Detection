import ExtractorAIO
from sklearn.naive_bayes import GaussianNB, BernoulliNB
from sklearn.metrics import accuracy_score, classification_report
from sklearn.ensemble import BaggingClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import SGDClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import cohen_kappa_score
from sklearn.metrics import confusion_matrix
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, ExtraTreesClassifier
from sklearn.tree import DecisionTreeClassifier
import matplotlib.pyplot as plt

from sklearn import preprocessing
from sklearn import svm
from sklearn import tree
import pandas as pd
import joblib
import pickle
import numpy as np
import seaborn as sns


def randomForestClassifierModel(X_test, X_train, y_test, y_train):
    # Random Forest Classifier
    clf = RandomForestClassifier()
    clf.fit(X_train, y_train)
    # Read the csv test file
    pred = clf.predict(X_test)
    # accuracy
    accuracy = accuracy_score(pred, y_test)
    print(clf)
    print(accuracy)
    print(classification_report(pred, y_test, labels=None))
    return pred


def runMultipleModels(X_test, X_train, y_test, y_train):
    models = [RandomForestClassifier, DecisionTreeClassifier, KNeighborsClassifier, AdaBoostClassifier, SGDClassifier,
              ExtraTreesClassifier, GaussianNB]
    accuracy_test = []
    model = []
    for m in models:
        model_name = type(m()).__name__
        print('######-Model =>\033[07m {} \033[0m'.format(type(m()).__name__))
        model_ = m()
        model_.fit(X_train, y_train)
        pred = model_.predict(X_test)
        acc = accuracy_score(pred, y_test)
        accuracy_test.append(acc)
        model.append(model_name)
        print('Test Accuracy :\033[32m \033[01m {:.5f}% \033[30m \033[0m'.format(acc * 100))
        print('\033[01m              Classification_report \033[0m')
        print(classification_report(y_test, pred))
        print('\033[31m###################- End -###################\033[0m')

    model = pd.Series(model, name='Model').astype(str)
    accuracy = pd.Series(accuracy_test, name='Accuracy')
    output = pd.concat([model, accuracy], axis=1)
    print(output)


def evaluateForTestData(X_test, pred):
    j = 0
    print(f"Test Sample Size : {len(X_test)}")
    print('\033[07m {} \033[0m'.format("Model=>Random Forest Classifier"))
    for i in X_test.index:
        appType = "malicious" if pred[j] == 1 else "benign"
        print(f"App Name: {i} Type : {appType}")
        j = j + 1


def Main():
    ExtractorAIO.Extractor(CSV_FILE_NAME, USES_PERMISSION, USES_FEATURE, USES_INTENT_ACTIONS)

    df = pd.read_csv("./" + CSV_FILE_NAME, sep=",")

    df = df.set_index("name")

    print(f"shape of the data Set: {df.shape}")

    X_train, X_test, y_train, y_test = train_test_split(df.iloc[:, 0:-1], df['type'], test_size=0.2, random_state=42)
    runMultipleModels(X_test, X_train, y_test, y_train)

    pred = randomForestClassifierModel(X_test, X_train, y_test, y_train)
    evaluateForTestData(X_test, pred)


CSV_FILE_NAME = "test_connection.csv"
USES_PERMISSION = True
USES_FEATURE = True
USES_INTENT_ACTIONS = True

if __name__ == '__main__':
    Main()
