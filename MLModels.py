import matplotlib.pyplot as plt
import pandas as pd
from sklearn import tree
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, ExtraTreesClassifier
from sklearn.linear_model import SGDClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from colorama import Fore
from tabulate import tabulate
import seaborn as sns
import numpy as np

import FeatureExtractor

DISABLE_CONFCONFUSIONUSION_MATRIX = False
EXTRACT_FEATURES_FROM_APKS = True


def displayTop10Features(df):
    fig, axs = plt.subplots(nrows=2, sharex=True)
    pd.Series.sort_values(df[df.type == 0].sum(axis=0), ascending=False)[1:11].plot.bar(ax=axs[0], title="Benign")
    pd.Series.sort_values(df[df.type == 1].sum(axis=0), ascending=False)[1:11].plot.bar(ax=axs[1], title="Malign",
                                                                                        color="red")
    plt.show()


def runNaiveBayesModel(X_test, X_train, y_test, y_train):
    # Naive Bayes algorithm
    gnb = GaussianNB()
    gnb.fit(X_train, y_train)
    # pred
    pred = gnb.predict(X_test)
    # accuracy
    accuracy = accuracy_score(pred, y_test)
    print("naive_bayes")
    print(accuracy)
    print(classification_report(pred, y_test, labels=None))
    return gnb, pred


def runKNeighborsModel(X_test, X_train, y_test, y_train):
    # kneighbors algorithm
    for i in range(3, 15, 3):
        neigh = KNeighborsClassifier(n_neighbors=i)
        neigh.fit(X_train, y_train)
        pred = neigh.predict(X_test)
        # accuracy
        accuracy = accuracy_score(pred, y_test)
        print("kneighbors {}".format(i))
        print(accuracy)
        print(classification_report(pred, y_test, labels=None))
        print("")


def runDecisionTreeClassifierModel(X_test, X_train, y_test, y_train):
    # Decision Tree Classifier
    clf = tree.DecisionTreeClassifier()
    clf.fit(X_train, y_train)
    # Read the csv test file
    pred = clf.predict(X_test)
    # accuracy
    accuracy = accuracy_score(pred, y_test)
    print(clf)
    print(accuracy)
    print(classification_report(pred, y_test, labels=None))


def randomForestClassifierModel(X_test, X_train, y_test, y_train):
    # Random Forest Classifier
    clf = RandomForestClassifier()
    clf.fit(X_train, y_train)
    # Read the csv test file
    pred = clf.predict(X_test)
    # accuracy
    accuracy = accuracy_score(pred, y_test)
    print("\n\n\n")
    print(clf)
    print(accuracy)
    print(classification_report(pred, y_test, labels=None))
    return clf, pred


def runMultipleModels(X_test, X_train, y_test, y_train):
    models = [RandomForestClassifier, DecisionTreeClassifier, KNeighborsClassifier, AdaBoostClassifier, SGDClassifier,
              ExtraTreesClassifier, GaussianNB]
    accuracy_test = []
    model = []
    for m in models:
        model_name = type(m()).__name__
        print('######-Model =>\033[07m {} \033[0m'.format(type(m()).__name__))
        model_ = m()
        model_.fit(X_train, y_train)
        pred = model_.predict(X_test)
        acc = accuracy_score(pred, y_test)
        accuracy_test.append(acc)
        model.append(model_name)
        print('Test Accuracy :\033[32m \033[01m {:.5f}% \033[30m \033[0m'.format(acc * 100))
        print('\033[01m              Classification_report \033[0m')
        print(classification_report(y_test, pred))
        print('\033[31m###################- End -###################\033[0m')
        print('\033[01m             Confusion_matrix \033[0m')
        if not DISABLE_CONFUSION_MATRIX:
            cf_matrix = confusion_matrix(y_test, pred)
            plt_ = sns.heatmap(cf_matrix / np.sum(cf_matrix), annot=True, fmt='0.2%')
            plt.title(model_name)
            plt.show()
        print("\n\n\n")

    model = pd.Series(model, name='Model').astype(str)
    accuracy = pd.Series(accuracy_test, name='Accuracy')
    output = pd.concat([model, accuracy], axis=1)
    global comparisonData
    comparisonData.append(output)
    print(output)


def evaluateForTestData(model, X_test, y_test, pred):
    j = 0
    print(f"Test Sample Size : {len(X_test)}")
    print('\033[07m {} \033[0m'.format("Model=>Random Forest Classifier"))
    list = []
    for i in X_test.index:
        each = []
        actualPred = "malicious" if pred[j] == 1 else "benign"
        expectedPred = "malicious" if y_test[j] == 1 else "benign"
        color = Fore.GREEN if actualPred == expectedPred else Fore.RED
        # print(color + f"App Name: {i} Expected : {expectedPred} Actual: {actualPred}")
        each.append(color + f"{i}")
        each.append(color + f"{expectedPred}")
        each.append(color + f"{actualPred}")
        list.append(each)
        j = j + 1

    print(tabulate(list, headers=['AppName', 'Expected', 'Actual']))


comparisonData = []


def compareFeatures():
    global DISABLE_CONFUSION_MATRIX
    DISABLE_CONFUSION_MATRIX = True

    global comparisonData
    comparisonData = []

    ##Permission only:
    featureToggler(True, False, False)
    runML()

    ##Feature only
    featureToggler(False, True, False)
    runML()

    ##Intent only
    featureToggler(False, False, True)
    runML()

    fig, axs = plt.subplots(nrows=3, sharex=True)
    j = 0
    for i in comparisonData:
        i = i.set_index("Model")
        graphTitle = "uses-permission Only" if j == 0 else "uses-feature Only" if j == 1 else "Intent Actions Only"
        color = "blue" if j == 0 else "red" if j == 1 else "green"
        i.plot.barh(ax=axs[j], color=color, title=graphTitle)
        # Remove tick frame
        axs[j].tick_params(left=False)
        # Add x, y gridlines
        axs[j].grid(visible=True, color='grey', linestyle='-.', linewidth=0.5, alpha=0.5)
        # Add annotation to bars
        for w in axs[j].patches:
            axs[j].text(w.get_width() + 0.05, w.get_y(),
                        str(round((w.get_width()), 3)),
                        fontsize=10, fontweight='bold',
                        color='grey')
        # Remove axes splines
        for key, spine in axs[j].spines.items():
            spine.set_visible(False)

        j = j + 1

    plt.show()


def increaseFeaturesAndCompare():
    global DISABLE_CONFUSION_MATRIX
    DISABLE_CONFUSION_MATRIX = True

    global comparisonData
    comparisonData = []

    ##Permission only:
    featureToggler(True, False, False)
    runML()

    ##Permission + Feature only
    featureToggler(True, True, False)
    runML()

    ##All three features
    featureToggler(True, True, True)
    runML()

    fig, axs = plt.subplots(nrows=3, sharex=True)
    j = 0
    for i in comparisonData:
        i = i.set_index("Model")
        graphTitle = "uses-permission Only" if j == 0 else "permissions + uses-feature" if j == 1 else "permissions + uses-feature + intent actions"
        color = "blue" if j == 0 else "red" if j == 1 else "green"
        i.plot.barh(ax=axs[j], color=color, title=graphTitle)
        # Remove tick frame
        axs[j].tick_params(left=False)
        # Add x, y gridlines
        axs[j].grid(visible=True, color='grey', linestyle='-.', linewidth=0.5, alpha=0.5)
        # Add annotation to bars
        for w in axs[j].patches:
            axs[j].text(w.get_width() + 0.05, w.get_y(),
                        str(round((w.get_width()), 3)),
                        fontsize=10, fontweight='bold',
                        color='grey')
        # Remove axes splines
        for key, spine in axs[j].spines.items():
            spine.set_visible(False)

        j = j + 1

    plt.show()


def featureToggler(permission, feature, intent):
    global USES_PERMISSION
    global USES_FEATURE
    global USES_INTENT_ACTIONS
    USES_PERMISSION = permission
    USES_FEATURE = feature
    USES_INTENT_ACTIONS = intent

    print(F"USES-PERMISSION: {USES_PERMISSION}")
    print(F"USES-USES_FEATURE: {USES_FEATURE}")
    print(F"USES_INTENT_ACTIONS: {USES_INTENT_ACTIONS}")


def runML():
    if EXTRACT_FEATURES_FROM_APKS:
        FeatureExtractor.Extractor(CSV_FILE_NAME, USES_PERMISSION, USES_FEATURE, USES_INTENT_ACTIONS)

    df = pd.read_csv("./" + CSV_FILE_NAME, sep=",")
    print(f"shape of the data Set: {df.shape}")
    df = df.set_index("name")
    print(f"shape of the data Set after indexing : {df.shape}")
    # displayTop10Features(df)

    X_train, X_test, y_train, y_test = train_test_split(df.iloc[:, 0:-1], df['type'], test_size=0.2, random_state=42)
    runMultipleModels(X_test, X_train, y_test, y_train)

    model, pred = randomForestClassifierModel(X_test, X_train, y_test, y_train)
    evaluateForTestData(model, X_test, y_test, pred)

    print(f"Benign(0) and Malign(1) App Count:\n{df.type.value_counts()}")


CSV_FILE_NAME = "data.csv"
USES_PERMISSION = True
USES_FEATURE = False
USES_INTENT_ACTIONS = False


def featureSelector():
    # feature selector:
    print("\nSelect the featurs for ML modelling:\n")
    permission = input("\nPress 1 to select USES-PERMISSION")
    feature = input("\nPress 1 to select USES-FEATURE")
    intentAction = input("\nPress 1 to select INTENT ACTIONS")
    permission = True if int(permission) == 1 else False
    feature = True if int(feature) == 1 else False
    intentAction = True if int(intentAction) == 1 else False
    featureToggler(permission, feature, intentAction)


def process10KDataset():
    global EXTRACT_FEATURES_FROM_APKS
    EXTRACT_FEATURES_FROM_APKS = False

    global DISABLE_CONFUSION_MATRIX
    DISABLE_CONFUSION_MATRIX = False

    global CSV_FILE_NAME
    CSV_FILE_NAME = "10KDataset.csv"

    featureSelector()

    runML()


def processBasicModel():
    global EXTRACT_FEATURES_FROM_APKS
    EXTRACT_FEATURES_FROM_APKS = True

    global DISABLE_CONFUSION_MATRIX
    DISABLE_CONFUSION_MATRIX = False

    global CSV_FILE_NAME
    CSV_FILE_NAME = "data.csv"

    featureSelector()

    runML()


if __name__ == '__main__':

    option = 1

    while option < 5:
        print(option)
        option = input("\nSelect the below options to process:\n"+
                       "1. Run Model and predict the output\n"+
                       "2. Compare all features in the data set\n"+
                       "3. Compare all features in an incremental way\n"+
                       "4. Run model for External 11000 apps dataset\n"+
                       "5. Press 5 to Exit...\n")

        option = int(option)

        if option == 1:
            processBasicModel()
        if option == 2:
            compareFeatures()
        if option == 3:
            increaseFeaturesAndCompare()
        if option == 4:
            process10KDataset()

    #
    # compareFeatures()
    # increaseFeaturesAndCompare()
    # process10KDataset()
