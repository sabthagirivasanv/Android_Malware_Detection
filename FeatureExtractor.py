from os import system as sys
import os, time
import xml.etree.ElementTree as ET
import numpy as np
import csv



def postProcessing():
    print("\n## Cleaning Temp. Files")
    sys("rm './PermList/UpdatePermList.txt' './PermList/UpdatedPermList.txt'")
    print(f"\n\n ***************DONE*****************  \nSaved as {CSV_FILE_NAME}\n\n")


def preprocessing(isFeature, isIndentAction, isPermission, out_file_path):
    global CSV_FILE_NAME
    CSV_FILE_NAME = out_file_path
    global USES_PERMISSION
    USES_PERMISSION = isPermission
    global USES_FEATURE
    USES_FEATURE = isFeature
    global USES_INTENT_ACTIONS
    USES_INTENT_ACTIONS = isIndentAction
    sys("rm './PermList/UpdatePermList.txt' './PermList/UpdatePermList2.txt' './PermList/UpdatedPermList.txt'")
    sys("clear")


def PermListUpdater():
    updateList = []
    defaultList = []
    with open('./PermList/UpdatePermList.txt') as updateFile:
        updatedata = updateFile.read()
        updateList = updatedata.split('\n')
    updateList.pop()
    with open('./PermList/DefaultPermList.txt') as defaultFile:
        defaultdata = defaultFile.read()
        defaultList = defaultdata.split('\n')
    defaultList.pop()

    newList = defaultList + list(set(updateList) - set(defaultList))

    with open('./PermList/UpdatedPermList.txt', 'w') as dumpFile:
        for i in newList:
            dumpFile.write(i + '\n')


# FUNCTION TO CREATE .csv FILE TO STORE DATA FROM PERMISSION LIST SUPPLIED
def CSVFormatter():
    test_file = open("./PermList/UpdatedPermList.txt")
    data = test_file.read()
    test_file.close()

    permlist = data.split('\n')
    permlist.pop()

    csv_row_data = ['name']  # ADD NAME COLUMN
    csv_row_data += permlist
    csv_row_data.append('type')  # ADD Type of the app COLUMN

    with open(CSV_FILE_NAME, 'w') as csv_file:
        writer = csv.writer(csv_file)
        writer.writerow(csv_row_data)


# FUNCTION TO EXTRACT PERMISSIONS FROM APPLICATIONS TO CREATE A LIST
def extractFeatureNamesFromApp():
    DIRTYPE = [Malware_Directory_Name, Benign_Directory_Name]
    permCollection = set()

    for datastoredir in DIRTYPE:
        if datastoredir == Malware_Directory_Name:  # FILTER APK TYPE TO AID IN LABEL GENERATION
            apktype = "MALWARE"
        else:
            apktype = "BENIGN"
        Flag = 1

        ApkNameList = os.listdir(datastoredir)
        if len(ApkNameList) == int(0):
            Flag = 0

        if Flag != int(0):
            ApkNameList.sort()
            TargetApkPath = datastoredir + "/"
            CurrentApk = 0

            for ApkName in ApkNameList:
                if ApkName == '.DS_Store':
                    continue

                TargetApk = TargetApkPath + ApkName

                print("(" + str(apktype) + ")" + " [" + str(CurrentApk + 1) + ' / ' + str(
                    len(ApkNameList)) + "] --- " + ApkName, end="")

                UnpackedDir = TargetApk
                MainfestPath = UnpackedDir + "/AndroidManifest.xml"
                try:
                    if USES_PERMISSION:
                        extractUsesPermission(MainfestPath, permCollection)

                    if USES_FEATURE:
                        extractUsesFeature(MainfestPath, permCollection)

                    if USES_INTENT_ACTIONS:
                        extractIntent(MainfestPath, permCollection)

                except FileNotFoundError:
                    print('Error')
                    print(TargetApk)
                    pass

                print()
                CurrentApk += 1

    permList = list(permCollection)

    with open("./PermList/UpdatePermList.txt", 'w') as file:  # SAVE LIST IN FILE.
        for i in permList:
            file.write(i + '\n')


# Extract all uses permission tags:
def extractUsesPermission(ManifestPath, permCollection):
    root = ET.parse(ManifestPath).getroot()
    permissions = root.findall(USES_PERMISSION_TAG)
    print("  SET STATUS :", end=' ')  # ADD NEW PERMISSION TO THE LIST
    for perm in permissions:
        for att in perm.attrib:
            permelement = perm.attrib[att]

            if permelement in ["true", "false"]:
                continue

            if permelement in permCollection:
                print("0", end=' ')
            else:
                print("1", end=' ')
                permCollection.add(permelement)


# Extract all uses Feature tags:
def extractUsesFeature(ManifestPath, permCollection):
    root = ET.parse(ManifestPath).getroot()
    permissions = root.findall(USES_FEATURE_TAG)
    print("  SET STATUS :", end=' ')  # ADD NEW PERMISSION TO THE LIST
    for perm in permissions:
        for att in perm.attrib:
            permelement = perm.attrib[att]

            if permelement in ["true", "false"]:
                continue

            if permelement in permCollection:
                print("0", end=' ')
            else:
                print("1", end=' ')
                permCollection.add(permelement)


# Extract all intent and its actions tags:
def extractIntent(ManifestPath, permCollection):
    root = ET.parse(ManifestPath).getroot()
    print("  SET STATUS :", end=' ')
    for eachAction in root.iter(ACTION_TAG):
        for att in eachAction.attrib:
            permelement = eachAction.attrib[att]

            if permelement in ["true", "false"]:
                continue

            if permelement in permCollection:
                print("0", end=' ')
            else:
                print("1", end=' ')
                permCollection.add(permelement)


# FUNCTION TO CREATE DATASET FROM EXISTING .csv FILE AND SUPPLIED APK FILES FOLDER.
def appendAppFeatureDataIntoCSV(datastoredir):
    if datastoredir == Malware_Directory_Name:
        TYPE = 1
        print("\n\t ** Extracting From Malware Samples ** \n\n")
    elif datastoredir == Benign_Directory_Name:
        TYPE = 0
        print("\n\t ** Extracting From Benign Samples ** \n\n")
    Flag = 1

    TargetApkPath = datastoredir + "/"
    ApkNameList = os.listdir(datastoredir)
    if len(ApkNameList) == int(0):
        Flag = 0

    if Flag != int(0):
        ApkNameList.sort()
        TotalApks = len(ApkNameList)
        CurrentApk = 0
        fieldnames = []
        with open(CSV_FILE_NAME) as csv_file:
            CSVREADER = csv.DictReader(csv_file)
            fieldnames = CSVREADER.fieldnames  # GET THE FIELD NAMES

        csv_master_dict = dict.fromkeys(fieldnames, 0)

        for ApkName in ApkNameList:
            if ApkName == '.DS_Store':
                continue

            TargetApk = TargetApkPath + ApkName

            print(">[" + str(CurrentApk + 1) + ' / ' + str(TotalApks) + "] --- " + ApkName, end=' ')
            print("\t.", end=' ')
            print(".", end=' ')

            UnpackedDir = TargetApk
            MainfestPath = UnpackedDir + "/AndroidManifest.xml"

            try:
                csv_master_dict = dict.fromkeys(fieldnames, 0)
                csv_master_dict['name'] = ApkName
                csv_master_dict['type'] = TYPE

                if USES_PERMISSION:
                    collectUsesPermission(MainfestPath, csv_master_dict)

                if USES_FEATURE:
                    collectUsesFeature(MainfestPath, csv_master_dict)

                if USES_INTENT_ACTIONS:
                    collectIntentActions(MainfestPath, csv_master_dict)
                print(".", end=' ')
                with open(CSV_FILE_NAME, 'a') as csv_dump:
                    CSVwriter = csv.DictWriter(csv_dump, fieldnames=fieldnames)
                    CSVwriter.writerow(csv_master_dict)  # SAVE DATA TO DATASET ROW BY ROW FOR EACH APPLICATION
                print(".")
            except Exception:
                print("EERRRROORR")
                pass
            CurrentApk += 1


# Collect uses-feature tags against each app and store in csv:
def collectUsesFeature(MainfestPath, csv_master_dict):
    root = ET.parse(MainfestPath).getroot()  # FORMAT DATA ROW
    permissions = root.findall(USES_FEATURE_TAG)
    for perm in permissions:
        for att in perm.attrib:
            permelement = perm.attrib[att]

            if permelement in ["true", "false"]:
                continue

            csv_master_dict[permelement] = 1


# Collect uses-permission tags against each app and store in csv:
def collectUsesPermission(MainfestPath, csv_master_dict):
    root = ET.parse(MainfestPath).getroot()  # FORMAT DATA ROW
    permissions = root.findall(USES_PERMISSION_TAG)
    for perm in permissions:
        for att in perm.attrib:
            permelement = perm.attrib[att]

            if permelement in ["true", "false"]:
                continue

            csv_master_dict[permelement] = 1


# Collect action tags against each app and store in csv:
def collectIntentActions(MainfestPath, csv_master_dict):
    root = ET.parse(MainfestPath).getroot()  # FORMAT DATA ROW
    for eachAction in root.iter(ACTION_TAG):
        for att in eachAction.attrib:
            permelement = eachAction.attrib[att]

            if permelement in ["true", "false"]:
                continue

            csv_master_dict[permelement] = 1


# MAIN DRIVER FUNCTION
# CONSTANTS:
CSV_FILE_NAME = "not_working.csv"
USES_FEATURE_TAG = "uses-feature"
USES_PERMISSION_TAG = "uses-permission"
ACTION_TAG = "action"
USES_PERMISSION = False
USES_FEATURE = False
USES_INTENT_ACTIONS = False
Malware_Directory_Name = "./Malware"
Benign_Directory_Name = "./Benign"


def Extractor(out_file_path, isPermission, isFeature, isIndentAction):
    preprocessing(isFeature, isIndentAction, isPermission, out_file_path)
    print('\033[01m              Extracting Features \033[0m')
    extractFeatureNamesFromApp()
    print('\033[01m              Creating Feature List \033[0m')
    PermListUpdater()
    print('\033[01m              Creating CSV Dataset with Column headers \033[0m')
    CSVFormatter()
    print('\033[01m              Appending Data into Dataset \033[0m')
    appendAppFeatureDataIntoCSV(Benign_Directory_Name)
    appendAppFeatureDataIntoCSV(Malware_Directory_Name)
    postProcessing()
# if __name__ == '__main__':
#     Extractor()
